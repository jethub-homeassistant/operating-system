#!/bin/bash
# shellcheck disable=SC2155
OVERLAY_SIZE=64M
OVERLAY_OFFSET=642M
BOOTSTATE_SIZE=2M
BOOTSTATE_OFFSET=128M
BOOT_SIZE=4M
OS_RESERVED_SIZE=124M
OS_RESERVED_OFFSET=4M
OS_RESERVED_END_SIZE=318M
OS_RESERVED_END_OFFSET=706M
SYSTEMA_OFFSET=130M
SYSTEMB_OFFSET=386M

function _create_disk_burn() {
    local hdd_ext=${1:-img}
    local hdd_img="$(os_image_name "${hdd_ext}")"
    local hdd_img_burn="$(os_image_name_burn "${hdd_ext}")"

    local boot_img="u-boot.bin.sd.bin"
    local rootfs_img="$(path_rootfs_img)"
    local overlay_img="overlay.ext4"
    local kernel_img="Image"

    local ddrbin_img="DDR.USB"
    local ubootbin_img="UBOOT.USB"
    local bootloader_img="u-boot.bin"
    {
      echo "[LIST_NORMAL]"
      echo 'file="'"${ddrbin_img}"'"		main_type="USB"		sub_type="DDR"'
      echo 'file="'"${ubootbin_img}"'"		main_type="USB"		sub_type="UBOOT"'
      echo 'file="_aml_dtb.PARTITION"		main_type="dtb"		sub_type="meson1"'
      echo 'file="platform.conf"		main_type="conf"		sub_type="platform"'
      echo ""
      echo "[LIST_VERIFY]"
      echo 'file="_aml_dtb.PARTITION"	main_type="PARTITION"		sub_type="_aml_dtb"'
      echo 'file="'"${bootloader_img}"'"	main_type="PARTITION"		sub_type="bootloader"'
      echo 'file="'"${boot_img##*/}"'"		main_type="PARTITION"		sub_type="bootjhos"'
      echo 'file="'"${kernel_img##*/}"'"		main_type="PARTITION"		sub_type="kernela"'
      echo 'file="'"${rootfs_img##*/}"'"		main_type="PARTITION"		sub_type="systema"'
      echo 'file="'"${overlay_img##*/}"'"		main_type="PARTITION"		sub_type="overlay"'
    } > "${BINARIES_DIR}/image.cfg"

    _create_dtb_file
    aml_image_v2_packer_new -r "${BINARIES_DIR}/image.cfg" "${BINARIES_DIR}/" "$hdd_img_burn"

}

function size2number() {
    local f=0
    for v in "${@}"
    do
    local p=$(echo "$v" | awk \
      'BEGIN{IGNORECASE = 1}
       function printsectors(n,b,p) {printf "%u\n", n*b^p}
       /B$/{     printsectors($1,  1, 0)};
       /K(iB)?$/{printsectors($1,  2, 10)};
       /M(iB)?$/{printsectors($1,  2, 20)};
       /G(iB)?$/{printsectors($1,  2, 30)};
       /T(iB)?$/{printsectors($1,  2, 40)};
       /KB$/{    printsectors($1, 10,  3)};
       /MB$/{    printsectors($1, 10,  6)};
       /GB$/{    printsectors($1, 10,  9)};
       /TB$/{    printsectors($1, 10, 12)}')
    for s in $p
    do
        f=$((f+s))
    done

    done
    echo $f
}


function _create_dtb_file () {
    local boot_size=$(size2number "${BOOT_SIZE}")
    local os_reserved=$(size2number "${OS_RESERVED_SIZE}")
    local os_reserved_offset=$(size2number "${OS_RESERVED_OFFSET}")
    local systemA_size=$(size2number "${SYSTEM_SIZE}")
    local systemA_offset=$(size2number "${SYSTEMA_OFFSET}")
    local os_reserved_end=$(size2number "${OS_RESERVED_END_SIZE}")
    local os_reserved_end_offset=$(size2number "${OS_RESERVED_END_OFFSET}")
    local systemB_size=$(size2number "${SYSTEM_SIZE}")
    local systemB_offset=$(size2number "${SYSTEMB_OFFSET}")
    local bootstate_size=$(size2number "${BOOTSTATE_SIZE}")
    local bootstate_offset=$(size2number "${BOOTSTATE_OFFSET}")
    local overlay_size=$(size2number "${OVERLAY_SIZE}")
    local overlay_offset=$(size2number "${OVERLAY_OFFSET}")

    {
      echo "/ {"
      echo "	partitions: partitions {"
      echo "		parts = <0x08>;"
      echo "		part-0 = <&uboot>;"
      echo "		part-1 = <&os_reserved>;"
      echo "		part-2 = <&os_bootstate>;"
      echo "		part-3 = <&os_systema>;"
      echo "		part-4 = <&os_systemb>;"
      echo "		part-5 = <&os_overlay>;"
      echo "		part-6 = <&os_reserved_end>;"
      echo ""
      echo "		uboot: uboot {"
      echo "			pname = \"uboot\";"
      echo "			size = <0x00 ${boot_size}>;"
      echo "      offset = <0x00>;"
      echo "			mask = <0x01>;"
      echo "		};"
      echo ""
      echo "		os_reserved: os_reserved {"
      echo "			pname = \"os_reserved\";"
      echo "			size = <0x00 ${os_reserved}>;"
      echo "      offset = <0x00 ${os_reserved_offset}>;"
      echo "			mask = <0x04>;"
      echo "		};"
      echo ""
      echo "		os_bootstate: os_bootstate {"
      echo "			pname = \"os_bootstate\";"
      echo "			size = <0x00 ${bootstate_size}>;"
      echo "      offset = <0x00 ${bootstate_offset}>;"
      echo "			mask = <0x04>;"
      echo "		};"
      echo ""
      echo "		os_systema: os_systema {"
      echo "			pname = \"os_systema\";"
      echo "			size = <0x00 ${systemA_size}>;"
      echo "      offset = <0x00 ${systemA_offset}>;"
      echo "			mask = <0x04>;"
      echo "		};"
      echo ""
      echo "		systemb: systemb {"
      echo "			pname = \"systemb\";"
      echo "			size = <0x00 ${systemB_size}>;"
      echo "      offset = <0x00 ${systemB_offset}>;"
      echo "			mask = <0x04>;"
      echo "		};"
      echo ""
      echo "		os_overlay: os_overlay {"
      echo "			pname = \"os_overlay\";"
      echo "			size = <0x00 ${overlay_size}>;"
      echo "      offset = <0x00 ${overlay_offset}>;"
      echo "			mask = <0x04>;"
      echo ""
      echo "		os_reserved_end: os_reserved_end {"
      echo "			pname = \"os_reserved_end\";"
      echo "			size = <0x00 ${os_reserved_end}>;"
      echo "      offset = <0x00 ${os_reserved_end_offset}>;"
      echo "			mask = <0x04>;"
      echo "		};"
      echo "	};"
      echo "};"
    } > "${BINARIES_DIR}/dts/partition.dtsi"

    echo cpp -nostdinc -I "${BINARIES_DIR}/dts" -I "${BINARIES_DIR}/dts/include" -undef -x assembler-with-cpp "${BINARIES_DIR}/dts/board.dts" "${BINARIES_DIR}/dts/board.dts.preprocess"
    cpp -nostdinc -I "${BINARIES_DIR}/dts" -I "${BINARIES_DIR}/dts/include" -undef -x assembler-with-cpp "${BINARIES_DIR}/dts/board.dts" "${BINARIES_DIR}/dts/board.dts.preprocess"
    echo dtc -I dts -O dtb -p 0x1000 -qqq "${BINARIES_DIR}/dts/board.dts.preprocess" -o "${BINARIES_DIR}/dts/board.dtb"
    dtc -I dts -O dtb -p 0x1000 -qqq "${BINARIES_DIR}/dts/board.dts.preprocess" -o "${BINARIES_DIR}/dts/board.dtb"

    dtbTool -o "$BINARIES_DIR/_aml_dtb.PARTITION" "${BINARIES_DIR}/dts/"

}


function convert_disk_image_burn_zip() {
    local hdd_ext=${1:-img}
    local hdd_img_burn="$(os_image_name_burn "${hdd_ext}")"

    rm -f "${hdd_img_burn}.zip"
    zip -j -m -q -r "${hdd_img_burn}.zip" "${hdd_img_burn}"
}
